version: '3.8'

networks:
  # External network (internet-facing)
  external-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24

  # Air-gapped network (isolated)
  airgapped-network:
    driver: bridge
    internal: true  # No external connectivity
    ipam:
      config:
        - subnet: 172.22.0.0/24

services:
  # Tunnel server (internet-facing)
  tunnel-server:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: tunnel-server
    networks:
      - external-network
    ports:
      - "8443:8443"  # WebSocket tunnel server
      - "8080:8080"  # Web app tunnel
      - "5432:5432"  # Database tunnel
      - "2222:2222"  # SSH tunnel
      - "27017:27017"  # MongoDB tunnel
      - "6443:6443"  # Kubernetes API server tunnel
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN:-rtxdfgrtxdfgvrtxdfgvhswvefchswvefcvhswvefc}
      - USE_IMPROVED=${USE_IMPROVED:-true}
      - TARGET_WEB=${TARGET_WEB:-webapp:80}
      - TARGET_DB=${TARGET_DB:-database:5432}
      - TARGET_SSH=${TARGET_SSH:-ssh-server:22}
      - TARGET_MONGODB=${TARGET_MONGODB:-ss-mongodb-0.mongodb:27017}
      - TARGET_K8S_API=${TARGET_K8S_API:-65.109.12.158:6443}
      - TLS_CERT_PATH=${TLS_CERT_PATH:-/certs/server.crt}
      - TLS_KEY_PATH=${TLS_KEY_PATH:-/certs/server.key}
    volumes:
      - ./certs:/certs:ro
    command:  
      - "-token=${TUNNEL_TOKEN:-rtxdfgrtxdfgvrtxdfgvhswvefchswvefcvhswvefc}"
      - "-listen=:8443"
      - "-improved=${USE_IMPROVED:-true}"
      - "-cert=/certs/server.crt"
      - "-key=/certs/server.key"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8443/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Tunnel client for web app
  tunnel-client-web:
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: tunnel-client-web
    networks:
      - external-network  # Only for connecting to tunnel server
      - airgapped-network # Access to air-gapped services
    depends_on:
      tunnel-server:
        condition: service_healthy
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN:-development-token-do-not-use-in-production}
    command:
      - "-server=ws://tunnel-server:8443/tunnel"
      - "-token=${TUNNEL_TOKEN:-development-token-do-not-use-in-production}"
      - "-forward=8080:webapp:80"
      - "-id=airgap-web"
      - "-improved=${USE_IMPROVED:-true}"

  # Tunnel client for database
  tunnel-client-db:
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: tunnel-client-db
    networks:
      - external-network
      - airgapped-network
    depends_on:
      tunnel-server:
        condition: service_healthy
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN:-development-token-do-not-use-in-production}
    command:
      - "-server=ws://tunnel-server:8443/tunnel"
      - "-token=${TUNNEL_TOKEN:-development-token-do-not-use-in-production}"
      - "-forward=5432:database:5432"
      - "-id=airgap-db"
      - "-improved=${USE_IMPROVED:-true}"

  # Tunnel client for SSH
  tunnel-client-ssh:
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: tunnel-client-ssh
    networks:
      - external-network
      - airgapped-network
    depends_on:
      tunnel-server:
        condition: service_healthy
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN:-development-token-do-not-use-in-production}
    command:
      - "-server=ws://tunnel-server:8443/tunnel"
      - "-token=${TUNNEL_TOKEN:-development-token-do-not-use-in-production}"
      - "-forward=2222:ssh-server:22"
      - "-id=airgap-ssh"
      - "-improved=${USE_IMPROVED:-true}"

  # Tunnel client for Kubernetes API server
  tunnel-client-k8s:
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: tunnel-client-k8s
    networks:
      - external-network
      - airgapped-network
    depends_on:
      tunnel-server:
        condition: service_healthy
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN:-development-token-do-not-use-in-production}
    command:
      - "-server=ws://tunnel-server:8443/tunnel"
      - "-token=${TUNNEL_TOKEN:-development-token-do-not-use-in-production}"
      - "-forward=6443:kubernetes-api:6443"
      - "-id=airgap-k8s-api"
      - "-improved=${USE_IMPROVED:-true}"

  # Example air-gapped services
  
  # Web application in air-gapped network
  webapp:
    image: nginx:alpine
    container_name: airgapped-webapp
    networks:
      - airgapped-network
    volumes:
      - ./examples/webapp:/usr/share/nginx/html:ro
    
  # Database in air-gapped network  
  database:
    image: postgres:15-alpine
    container_name: airgapped-database
    networks:
      - airgapped-network
    environment:
      - POSTGRES_PASSWORD=airgapped-password
      - POSTGRES_USER=airgapped
      - POSTGRES_DB=airgapped_db
    volumes:
      - db-data:/var/lib/postgresql/data

  # SSH server in air-gapped network
  ssh-server:
    image: linuxserver/openssh-server:latest
    container_name: airgapped-ssh
    networks:
      - airgapped-network
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
      - PASSWORD_ACCESS=true
      - USER_PASSWORD=airgapped
      - USER_NAME=airgapped

  # Kubernetes API server simulation in air-gapped network
  kubernetes-api:
    image: nginx:alpine
    container_name: airgapped-k8s-api
    networks:
      - airgapped-network
    ports:
      - "6443"
    volumes:
      - ./examples/k8s-api:/usr/share/nginx/html:ro
    command: >
      sh -c "echo 'server {
        listen 6443 ssl;
        server_name kubernetes-api;
        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        location / {
          return 200 \"{\\\"kind\\\":\\\"APIVersions\\\",\\\"versions\\\":[\\\"v1\\\"],\\\"serverAddressByClientCIDRs\\\":[{\\\"clientCIDR\\\":\\\"0.0.0.0/0\\\",\\\"serverAddress\\\":\\\"kubernetes-api:6443\\\"}]}\";
          add_header Content-Type application/json;
        }
      }' > /etc/nginx/conf.d/default.conf &&
      mkdir -p /etc/nginx/ssl &&
      openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/server.key -out /etc/nginx/ssl/server.crt -subj '/CN=kubernetes-api' &&
      nginx -g 'daemon off;'"

  # External user simulation (can only access through tunnel)
  external-user:
    image: curlimages/curl:latest
    container_name: external-user
    networks:
      - external-network
    command: /bin/sh -c "while true; do sleep 3600; done"
    depends_on:
      - tunnel-server

  # Traffic monitoring container
  traffic-monitor:
    build:
      context: .
      dockerfile: Dockerfile.monitor
    container_name: traffic-monitor
    networks:
      - external-network
      - airgapped-network
    volumes:
      - ./captures:/captures
      - ./logs:/logs
    environment:
      - TUNNEL_SERVER=tunnel-server
      - TUNNEL_PORT=8443
    depends_on:
      - tunnel-server
    cap_add:
      - NET_ADMIN
      - NET_RAW
    command: /bin/sh -c "while true; do sleep 300; done"

volumes:
  db-data: