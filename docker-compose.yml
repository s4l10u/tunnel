version: '3.8'

# NEW SECURE ARCHITECTURE:
# - Server only knows ports and client IDs (no air-gapped network topology)
# - Clients specify targets using -forward=port:target:port 
# - More secure: server has no knowledge of internal services
# - More flexible: client controls which services are accessible

networks:
  # External network (internet-facing)
  external-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24

  # Air-gapped network (isolated)
  airgapped-network:
    driver: bridge
    internal: true  # No external connectivity
    ipam:
      config:
        - subnet: 172.22.0.0/24

services:
  # Tunnel server (internet-facing) - NEW ARCHITECTURE: Port-only configuration
  tunnel-server:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: tunnel-server
    networks:
      - external-network
    ports:
      - "8443:8443"  # WebSocket tunnel server
      - "8088:8088"  # Web app tunnel (target decided by client)
      - "5432:5432"  # Database tunnel (target decided by client)
      - "2222:2222"  # SSH tunnel (target decided by client)
      - "27017:27017"  # MongoDB tunnel (target decided by client)
      - "6443:6443"  # Kubernetes API server tunnel (target decided by client)
      # Optional services
      - "6379:6379"  # Redis tunnel (target decided by client)
      - "9200:9200"  # Elasticsearch tunnel (target decided by client)
    environment:
      # Core Configuration
      - TUNNEL_TOKEN=${TUNNEL_TOKEN:-your-secure-production-token-here}
      - USE_IMPROVED=${USE_IMPROVED:-true}
      
      # TLS Configuration
      - TLS_CERT_PATH=${TLS_CERT_PATH:-}
      - TLS_KEY_PATH=${TLS_KEY_PATH:-}
      
      # Optional Service Controls (Runtime enable/disable)
      - TUNNEL_FORWARDER_REDIS_ENABLED=${ENABLE_REDIS:-false}
      - TUNNEL_FORWARDER_ELASTICSEARCH_ENABLED=${ENABLE_ELASTICSEARCH:-false}
      
      # NOTE: Target configurations removed - now handled by clients for security
    volumes:
      - ./certs:/certs:ro
      - ./docker-config.yaml:/app/config.yaml:ro  # NEW: YAML configuration
    command: ["-config=/app/config.yaml"]  # NEW: Use YAML config
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8443/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Tunnel client for web app
  # NEW ARCHITECTURE: Client specifies targets, server only knows ports
  tunnel-client-web:
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: tunnel-client-web
    networks:
      - external-network  # Only for connecting to tunnel server
      - airgapped-network # Access to air-gapped services
    depends_on:
      tunnel-server:
        condition: service_healthy
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN:-your-secure-production-token-here}
    command:
      - "-server=ws://tunnel-server:8443/tunnel"
      - "-token=${TUNNEL_TOKEN:-your-secure-production-token-here}"
      - "-forward=8088:nginx-webapp:80"  # Client controls target (webapp:80)
      - "-id=airgap-web"
      - "-improved=${USE_IMPROVED:-true}"

  # Tunnel client for database
  # Client decides target (database:5432), server only exposes port 5432
  # tunnel-client-db:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.client
  #   container_name: tunnel-client-db
  #   networks:
  #     - external-network
  #     - airgapped-network
  #   depends_on:
  #     tunnel-server:
  #       condition: service_healthy
  #   environment:
  #     - TUNNEL_TOKEN=${TUNNEL_TOKEN:-your-secure-production-token-here}
  #   command:
  #     - "-server=ws://tunnel-server:8443/tunnel"
  #     - "-token=${TUNNEL_TOKEN:-your-secure-production-token-here}"
  #     - "-forward=5432:database:5432"  # Client controls target (database:5432)
  #     - "-id=airgap-db"
  #     - "-improved=${USE_IMPROVED:-true}"

  # Tunnel client for SSH
  # tunnel-client-ssh:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.client
  #   container_name: tunnel-client-ssh
  #   networks:
  #     - external-network
  #     - airgapped-network
  #   depends_on:
  #     tunnel-server:
  #       condition: service_healthy
  #   environment:
  #     - TUNNEL_TOKEN=${TUNNEL_TOKEN:-your-secure-production-token-here}
  #   command:
  #     - "-server=ws://tunnel-server:8443/tunnel"
  #     - "-token=${TUNNEL_TOKEN:-your-secure-production-token-here}"
  #     - "-forward=2222:ssh-server:22"
  #     - "-id=airgap-ssh"
  #     - "-improved=${USE_IMPROVED:-true}"

  # Tunnel client for Kubernetes API server
  # tunnel-client-k8s:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.client
  #   container_name: tunnel-client-k8s
  #   networks:
  #     - external-network
  #     - airgapped-network
  #   depends_on:
  #     tunnel-server:
  #       condition: service_healthy
  #   environment:
  #     - TUNNEL_TOKEN=${TUNNEL_TOKEN:-your-secure-production-token-here}
  #   command:
  #     - "-server=ws://tunnel-server:8443/tunnel"
  #     - "-token=${TUNNEL_TOKEN:-your-secure-production-token-here}"
  #     - "-forward=6443:kubernetes-api:6443"
  #     - "-id=airgap-k8s-api"
  #     - "-improved=${USE_IMPROVED:-true}"

  # Example air-gapped services
  
  # Web application in air-gapped network
  nginx-webapp:
    image: nginx:alpine
    container_name: nginx-webapp
    networks:
      - airgapped-network
    volumes:
      - ./examples/webapp:/usr/share/nginx/html:ro
    
  # Database in air-gapped network  
  # database:
  #   image: postgres:15-alpine
  #   container_name: airgapped-database
  #   networks:
  #     - airgapped-network
  #   environment:
  #     - POSTGRES_PASSWORD=airgapped-password
  #     - POSTGRES_USER=airgapped
  #     - POSTGRES_DB=airgapped_db
  #   volumes:
  #     - db-data:/var/lib/postgresql/data

  # # SSH server in air-gapped network
  # ssh-server:
  #   image: linuxserver/openssh-server:latest
  #   container_name: airgapped-ssh
  #   networks:
  #     - airgapped-network
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=UTC
  #     - PASSWORD_ACCESS=true
  #     - USER_PASSWORD=airgapped
  #     - USER_NAME=airgapped

  # # Kubernetes API server simulation in air-gapped network
  # kubernetes-api:
  #   image: nginx:alpine
  #   container_name: airgapped-k8s-api
  #   networks:
  #     - airgapped-network
  #   ports:
  #     - "6443"
  #   volumes:
  #     - ./examples/k8s-api:/usr/share/nginx/html:ro
  #   command: >
  #     sh -c "echo 'server {
  #       listen 6443 ssl;
  #       server_name kubernetes-api;
  #       ssl_certificate /etc/nginx/ssl/server.crt;
  #       ssl_certificate_key /etc/nginx/ssl/server.key;
  #       ssl_protocols TLSv1.2 TLSv1.3;
  #       location / {
  #         return 200 \"{\\\"kind\\\":\\\"APIVersions\\\",\\\"versions\\\":[\\\"v1\\\"],\\\"serverAddressByClientCIDRs\\\":[{\\\"clientCIDR\\\":\\\"0.0.0.0/0\\\",\\\"serverAddress\\\":\\\"kubernetes-api:6443\\\"}]}\";
  #         add_header Content-Type application/json;
  #       }
  #     }' > /etc/nginx/conf.d/default.conf &&
  #     mkdir -p /etc/nginx/ssl &&
  #     openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/server.key -out /etc/nginx/ssl/server.crt -subj '/CN=kubernetes-api' &&
  #     nginx -g 'daemon off;'"

  # # Optional: Redis Cache (NEW - demonstrate unlimited services)
  # redis:
  #   image: redis:7-alpine
  #   container_name: airgapped-redis
  #   networks:
  #     - airgapped-network
  #   command: redis-server --requirepass airgapped-redis-password
  #   profiles:
  #     - optional  # Only start when explicitly requested
      
  # # Optional: Elasticsearch (NEW - demonstrate unlimited services)
  # elasticsearch:
  #   image: elasticsearch:8.11.0
  #   container_name: airgapped-elasticsearch
  #   networks:
  #     - airgapped-network
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   profiles:
  #     - optional  # Only start when explicitly requested

  # External user simulation (can only access through tunnel)
  # external-user:
  #   image: curlimages/curl:latest
  #   container_name: external-user
  #   networks:
  #     - external-network
  #   command: /bin/sh -c "while true; do sleep 3600; done"
  #   depends_on:
  #     - tunnel-server

  # Traffic monitoring container
  # traffic-monitor:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.monitor
  #   container_name: traffic-monitor
  #   networks:
  #     - external-network
  #     - airgapped-network
  #   volumes:
  #     - ./captures:/captures
  #     - ./logs:/logs
  #   environment:
  #     - TUNNEL_SERVER=tunnel-server
  #     - TUNNEL_PORT=8443
  #   depends_on:
  #     - tunnel-server
  #   cap_add:
  #     - NET_ADMIN
  #     - NET_RAW
  #   command: /bin/sh -c "while true; do sleep 300; done"

volumes:
  db-data: